//! TBD
//!
//! ```text
//!  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! Sign:
//!  1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     8    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! +Infinity:
//!  0111 1111 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     7    8    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! -Infinity:
//!  1111 1111 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     F    8    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! NaN:
//!  0111 1100 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     7    C    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! SNaN:
//!  0111 1110 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     7    E    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! 0E+1
//!  0011 0000 0100 0010 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     3    0    4    2    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!  1|<----- 15 ----->| |<-------------------------------------------------------------- 112 -------------------------------------------------------------------->|
//!
//! 0E+6111
//!  0101 1111 1111 1110 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!     5    f    f    e    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! 0E-6111
//!   0000 0000 1000 0010 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//!      0    0    8    2    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0
//!
//! ```

use crate::bid128::bid_functions::{Flags, Rounding};
use std::fmt;

mod bid128_from_int;
mod bid128_from_string;
pub mod bid128_functions;
mod bid128_quantize;
mod bid128_scalb;
mod bid128_to_string;
mod bid128_to_string_macros;
mod bid128_to_string_tables;
mod bid_decimal_data;
mod bid_functions;
mod bid_internal;
#[cfg(test)]
mod tests;

/// 128-bit decimal number.
#[derive(Copy, Clone)]
pub struct BID128 {
  /// Two 64-bit fields holding encoded decimal value.
  w: [u64; 2],
  /// Rounding mode.
  pub rounding: Rounding,
  /// Exception status flags.
  pub flags: Flags,
}

impl fmt::Debug for BID128 {
  /// Converts [BID128] into debug string.
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    write!(f, "[{:016x},{:016x}]", self.w[1], self.w[0])
  }
}

/// Internal macro for creating 128-bit decimal value.
macro_rules! __bid128 {
  ($w0:expr, $w1:expr, $rnd:expr, $status:expr) => {{
    BID128 {
      w: [$w0, $w1],
      rounding: $rnd,
      flags: $status,
    }
  }};
  ($w0:expr, $w1:expr, $rnd:expr) => {{
    BID128 {
      w: [$w0, $w1],
      rounding: $rnd,
      flags: 0,
    }
  }};
  ($w0:expr, $w1:expr) => {{
    BID128 {
      w: [$w0, $w1],
      rounding: 0, // BID_ROUNDING_TO_NEAREST
      flags: 0,
    }
  }};
  () => {{
    BID128 {
      w: [0, 0],
      rounding: 0, // BID_ROUNDING_TO_NEAREST,
      flags: 0,
    }
  }};
}

pub(crate) use __bid128;
