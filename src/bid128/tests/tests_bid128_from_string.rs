//! Tests for `bid128_from_string`.

use crate::bid128::BID128;

#[test]
fn _0001() {
  let actual = BID128::from("12");
  assert_eq!("[3040000000000000,000000000000000c]", format!("{:?}", actual))
}

#[test]
#[ignore]
fn _0001_() {
  let actual = BID128::from("    12");
  assert_eq!("[3040000000000000,000000000000000c]", format!("{:?}", actual))
}

#[test]
fn _0002() {
  let actual = BID128::from();
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0003() {
  let actual = BID128::from("          \t           \n");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0004() {
  let actual = BID128::from("+INF");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0005() {
  let actual = BID128::from("+inf");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0006() {
  let actual = BID128::from("+INFINITY");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0007() {
  let actual = BID128::from("+infinity");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0008() {
  let actual = BID128::from("+INFiNITY");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0009() {
  let actual = BID128::from("INF");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0010() {
  let actual = BID128::from("inf");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0011() {
  let actual = BID128::from("INFINITY");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0012() {
  let actual = BID128::from("infinity");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0013() {
  let actual = BID128::from("INFiNITY");
  assert_eq!("[7800000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0014() {
  let actual = BID128::from("+NAN");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0015() {
  let actual = BID128::from("+nan");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0016() {
  let actual = BID128::from("NAN");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0017() {
  let actual = BID128::from("nan");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0018() {
  let actual = BID128::from("+SNAN");
  assert_eq!("[7e00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0019() {
  let actual = BID128::from("+snan");
  assert_eq!("[7e00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0020() {
  let actual = BID128::from("SNAN");
  assert_eq!("[7e00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0021() {
  let actual = BID128::from("snan");
  assert_eq!("[7e00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0022() {
  let actual = BID128::from("+INFi");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0023() {
  let actual = BID128::from("+SNANi");
  assert_eq!("[7e00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0024() {
  let actual = BID128::from("+INFINITYi");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0025() {
  let actual = BID128::from("INFi");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0026() {
  let actual = BID128::from("SNANi");
  assert_eq!("[7e00000000000000,0000000000000000]", format!("{:?}", actual))
}

#[test]
fn _0027() {
  let actual = BID128::from("INFINITYi");
  assert_eq!("[7c00000000000000,0000000000000000]", format!("{:?}", actual));
}

#[test]
fn _0028() {
  let n = 9999999999999999999999999999999999u128;
  let e = -33_i64;
  let sign = 0x8000000000000000u64;
  let w0 = n as u64;
  let mut w1 = (n >> 64) as u64;
  println!("{:032x}", n);
  println!("{:016x}{:016x}", w1, w0);
  let biased = ((e + 6176) as u64) << 49;
  w1 = w1 | biased | sign;
  println!("{:016x}{:016x}", w1, w0);
  println!("afffed09bead87c0378d8e63ffffffff");
}

/*
bid128_from_string 0 0e6176 0e6111 00
bid128_from_string 0 12345678901234567890123456789012345 1234567890123456789012345678901234e1 20
bid128_from_string 1 12345678901234567890123456789012345 1234567890123456789012345678901234e1 20
bid128_from_string 2 12345678901234567890123456789012345 1234567890123456789012345678901235e1 20
bid128_from_string 3 12345678901234567890123456789012345 1234567890123456789012345678901234e1 20
bid128_from_string 4 12345678901234567890123456789012345 1234567890123456789012345678901235e1 20

bid128_from_string 2 -9.9999999999999999999999999999999995 [afffed09bead87c0378d8e63ffffffff] 20
bid128_from_string 1 -9.9999999999999999999999999999999995 [b000314dc6448d9338c15b0a00000000] 20
bid128_from_string 0 9.9999999999999999999999999999999995 [3000314dc6448d9338c15b0a00000000] 20
bid128_from_string 2 9.9999999999999999999999999999999995 [3000314dc6448d9338c15b0a00000000] 20
bid128_from_string 4 9.9999999999999999999999999999999995 [3000314dc6448d9338c15b0a00000000] 20
bid128_from_string 3 9.9999999999999999999999999999999995 [2fffed09bead87c0378d8e63ffffffff] 20
bid128_from_string 1 9.9999999999999999999999999999999995 [2fffed09bead87c0378d8e63ffffffff] 20
bid128_from_string 0 1.0000000000000000000000000000000015 [2ffe314dc6448d9338c15b0a00000002] 20
bid128_from_string 2 1.0000000000000000000000000000000015 [2ffe314dc6448d9338c15b0a00000002] 20
bid128_from_string 4 1.0000000000000000000000000000000015 [2ffe314dc6448d9338c15b0a00000002] 20
bid128_from_string 3 1.0000000000000000000000000000000015 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 1 1.0000000000000000000000000000000015 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 1 000.0 [303e0000000000000000000000000000] 00
bid128_from_string 1 0.0000000000000000000000000000000000000000000000000000000000000001001 [2fba00000000000000000000000003e9] 00
bid128_from_string 1 0.0000000000000000000000000000000000000000000000000000000000000001001 [2fba00000000000000000000000003e9] 00
bid128_from_string 0 0. [30400000000000000000000000000000] 00
bid128_from_string 0 1. [30400000000000000000000000000001] 00
bid128_from_string 0 1.. [7c000000000000000000000000000000] 00
bid128_from_string 0 1.0000000000000000000000000000000005 [2ffe314dc6448d9338c15b0a00000000] 20
bid128_from_string 2 1.0000000000000000000000000000000005 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 4 1.0000000000000000000000000000000005 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 3 1.0000000000000000000000000000000005 [2ffe314dc6448d9338c15b0a00000000] 20
bid128_from_string 1 1.0000000000000000000000000000000005 [2ffe314dc6448d9338c15b0a00000000] 20
bid128_from_string 0 1.00000000000000000000000000000000051 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 2 1.00000000000000000000000000000000051 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 4 1.00000000000000000000000000000000051 [2ffe314dc6448d9338c15b0a00000001] 20
bid128_from_string 3 1.00000000000000000000000000000000051 [2ffe314dc6448d9338c15b0a00000000] 20
bid128_from_string 1 1.00000000000000000000000000000000051 [2ffe314dc6448d9338c15b0a00000000] 20
bid128_from_string 0 1.9999999999999999999999999990000004999999999999999 [2ffe629b8c891b267182b613fff0bdc0] 20
bid128_from_string 2 1.9999999999999999999999999990000004999999999999999 [2ffe629b8c891b267182b613fff0bdc1] 20
bid128_from_string 1 1.9999999999999999999999999990000004999999999999999 [2ffe629b8c891b267182b613fff0bdc0] 20
bid128_from_string 4 1.9999999999999999999999999990000004999999999999999 [2ffe629b8c891b267182b613fff0bdc0] 20
bid128_from_string 3 1.9999999999999999999999999990000004999999999999999 [2ffe629b8c891b267182b613fff0bdc0] 20
bid128_from_string 0 1.1E2 [3042000000000000000000000000000b] 00
bid128_from_string 0 1.1P2 [7c000000000000000000000000000000] 00
bid128_from_string 0 1.1EE [7c000000000000000000000000000000] 00
bid128_from_string 0 1.1P-2 [7c000000000000000000000000000000] 00
bid128_from_string 0 1.1E-2E [303a000000000000000000000000000b] 00

 */
