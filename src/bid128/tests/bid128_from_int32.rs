//! bid128_from_int32

use crate::bid128::bid_functions::Flags;
use crate::BID128;

#[inline(always)]
fn eq(n: i32, result: &str, status: Flags) {
  let actual = BID128::from(n);
  assert_eq!(result, format!("[{:016x}{:016x}]", actual.w[1], actual.w[0]));
  assert_eq!(status, actual.flags);
}

#[test]
fn _0001() {
  eq(-1250716900, "[b040000000000000000000004a8c6ce4]", 0x00);
}

#[test]
fn _0002() {
  eq(-1375453304, "[b0400000000000000000000051fbc078]", 0x00);
}

#[test]
fn _0003() {
  eq(1450740614, "[30400000000000000000000056788b86]", 0x00);
}

#[test]
fn _0004() {
  eq(-1834423832, "[b040000000000000000000006d571618]", 0x00);
}

#[test]
fn _0005() {
  eq(1930174213, "[304000000000000000000000730c1f05]", 0x00);
}

#[test]
fn _0006() {
  eq(1947153827, "[304000000000000000000000740f35a3]", 0x00);
}

#[test]
fn _0007() {
  eq(206409795, "[3040000000000000000000000c4d9043]", 0x00);
}

#[test]
fn _0008() {
  eq(2103044481, "[3040000000000000000000007d59e981]", 0x00);
}

#[test]
fn _0009() {
  eq(-244968231, "[b040000000000000000000000e99eb27]", 0x00);
}

#[test]
fn _0010() {
  eq(-328472007, "[b04000000000000000000000139415c7]", 0x00);
}

#[test]
fn _0011() {
  eq(-430827320, "[b0400000000000000000000019ade738]", 0x00);
}

#[test]
fn _0012() {
  eq(472411624, "[3040000000000000000000001c286de8]", 0x00);
}

#[test]
fn _0013() {
  eq(-503478515, "[b040000000000000000000001e0278f3]", 0x00);
}

#[test]
fn _0014() {
  eq(620564199, "[30400000000000000000000024fd0ee7]", 0x00);
}

#[test]
fn _0015() {
  eq(648685195, "[30400000000000000000000026aa268b]", 0x00);
}

#[test]
fn _0016() {
  eq(734426893, "[3040000000000000000000002bc6770d]", 0x00);
}

#[test]
fn _0017() {
  eq(774990435, "[3040000000000000000000002e316a63]", 0x00);
}

#[test]
fn _0018() {
  eq(797130594, "[3040000000000000000000002f833f62]", 0x00);
}

#[test]
fn _0019() {
  eq(-893748152, "[b04000000000000000000000354583b8]", 0x00);
}

#[test]
fn _0020() {
  eq(-958871488, "[b04000000000000000000000392737c0]", 0x00);
}
